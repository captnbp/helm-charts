---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "home-assistant.fullname" . }}"
  labels: {{- include "home-assistant.labels" . | nindent 4 }}
    app.kubernetes.io/component: home-assistant
spec:
  selector:
    matchLabels: {{- include "home-assistant.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: home-assistant
  replicas: 1
  serviceName: {{ template "home-assistant.fullname" . }}
  template:
    metadata:
      labels: {{- include "home-assistant.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: home-assistant
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "home-assistant.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
{{- if .Values.hostNetwork }}
      hostNetwork: {{ .Values.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - name: http
              containerPort: 8123
              protocol: TCP
          securityContext:
            capabilities:
              add:
                - SETFCAP
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: {{ .Values.probes.liveness.scheme }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: {{ .Values.probes.readiness.scheme }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end }}
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: /
              port: http
              scheme: {{ .Values.probes.startup.scheme }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
          {{- end }}
          env:
            {{- range $key, $value := .Values.extraEnv }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
            {{- range $name, $opts := .Values.extraEnvSecrets }}
            - name: {{ $name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $opts.secret }}
                  key: {{ $opts.key }}
            {{- end }}
          envFrom:
          {{- range .Values.extraSecretForEnvFrom }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          volumeMounts:
            - mountPath: /config
              name: config
{{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 12 }}
{{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
{{ toYaml .Values.securityContext | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
{{- if not .Values.persistence.enabled }}
        - name: "config"
          emptyDir: {}
{{- else if .Values.persistence.existingClaim }}
        - name: "config"
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: "config"
        {{- if .Values.persistence.annotations }}
        annotations: {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes: {{- toYaml .Values.persistence.accessModes | nindent 10 }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
          {{- if .Values.persistence.existingVolume }}
          selector:
            selectorLabels:
              volume: {{ .Values.persistence.existingVolume }}
          {{- end }}
{{- end }}